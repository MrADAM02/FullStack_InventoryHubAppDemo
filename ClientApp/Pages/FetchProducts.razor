@page "/fetchproducts"
@using System.Text.Json

<h3>üõí InventoryHub Product List</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div style="color:red; font-weight:bold; margin-bottom:1em;">
        <span>‚ö†Ô∏è @errorMessage</span>
    </div>
}
else if (products == null)
{
    <div>
        <span style="color:gray;">Loading products...</span>
    </div>
}
else if (products.Length == 0)
{
    <div>
        <span style="color:orange;">No products available.</span>
    </div>
}
else
{
    <table style="width:100%; border-collapse:collapse;">
        <thead style="background:#f0f0f0;">
            <tr>
                <th style="padding:8px; border-bottom:1px solid #ccc;">Name</th>
                <th style="padding:8px; border-bottom:1px solid #ccc;">Price</th>
                <th style="padding:8px; border-bottom:1px solid #ccc;">Stock</th>
                <th style="padding:8px; border-bottom:1px solid #ccc;">Category</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td style="padding:8px; border-bottom:1px solid #eee;">@product.Name</td>
                    <td style="padding:8px; border-bottom:1px solid #eee;">$@product.Price</td>
                    <td style="padding:8px; border-bottom:1px solid #eee;">@product.Stock</td>
                    <td style="padding:8px; border-bottom:1px solid #eee;">@(product.Category?.Name ?? "N/A")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    private HttpClient Http { get; set; } = default!;

    private Product[]? products;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
            var response = await Http.GetAsync("/api/productlist", cts.Token);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                products = JsonSerializer.Deserialize<Product[]>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                errorMessage = $"Error: {response.StatusCode}";
            }
        }
        catch (OperationCanceledException)
        {
            errorMessage = "Request timed out.";
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public double Price { get; set; }
        public int Stock { get; set; }
        public Category Category { get; set; }
    }

    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
}