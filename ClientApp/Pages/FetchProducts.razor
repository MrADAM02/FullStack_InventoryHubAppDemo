@page "/fetchproducts"
@using System.Text.Json
@using ClientApp.Services

<section class="product-list" aria-labelledby="product-list-heading">
    <h3 id="product-list-heading" class="visually-hidden">InventoryHub Product List</h3>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-error" role="alert">
            <span class="alert-icon">⚠️</span> @errorMessage
        </div>
    }
    else if (products == null)
    {
        <div class="loading" aria-live="polite">
            <span>Loading products...</span>
        </div>
    }
    else if (!products.Any())
    {
        <div class="empty-state" aria-live="polite">
            <span>No products available.</span>
        </div>
    }
    else
    {
        <table class="product-table" role="grid">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Price</th>
                    <th scope="col">Stock</th>
                    <th scope="col">Category</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@product.Name</td>
                        <td>$@product.Price.ToString("F2")</td>
                        <td>@product.Stock</td>
                        <td>@(product.Category?.Name ?? "N/A")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</section>

@code {
    [Inject]
    private ProductService ProductService { get; set; } = default!;
    private Product[]? products;
    private string? errorMessage;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await ProductService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public double Price { get; set; }
        public int Stock { get; set; }
        public Category Category { get; set; } = new Category();
    }

    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
